[project]
name = "snowdrift"
version = "0.1.0"
description = "Python package for generating optimized settings handlers (especially for HPC use) in C++ and other languages"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Maciej Manna", email = "maciejmanna@gmail.com" }
]

requires-python = ">=3.9"
dependencies = []

[project.urls]
repository = "https://github.com/xann16/snowdrift"

[project.scripts]
snowdrift = "snowdrift.cli.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pdoc>=15.0.3",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "*_test.py"
addopts = "-ra -We"

[tool.mypy]
strict = true
disallow_untyped_defs = true
warn_redundant_casts = true
pretty = true
force_union_syntax = true

[tool.ruff]
line-length = 120
target-version = "py39"
include = ["src/**/*.py", "tests/**/*.py"]

[tool.ruff.format]
docstring-code-format = true
quote-style = "single"

[tool.ruff.lint]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double"}
isort = { combine-as-imports = true, known-first-party = ["snowdrift"] }
mccabe = { max-complexity = 15 }

extend-select = [
    # === Flake8-based checks === #
    "YTT",  # Flake8-2020 – checks for Python 2020 best practices
    "ANN",  # Flake8-annotations – enforces type annotation style
    "ASYNC",# Flake8-async – checks async/await usage
    "S",    # Flake8-bandit – security issues
    "BLE",  # Flake8-blind-except – flags bare excepts
    "FBT",  # Flake8-boolean-trap – potential pitfalls with booleans
    "B",    # Flake8-bugbear – common bug patterns
    "A",    # Flake8-builtins – misuse of Python built-in names
    "COM",  # Flake8-commas – trailing/comma issues
    "C4",   # Flake8-comprehensions – best practices in comprehensions
    "DTZ",  # Flake8-datetimez – requires timezone-aware datetime objects
    "T10",  # Flake8-debugger – debugger statements (e.g. pdb)
    "DJ",   # Flake8-django – Django-specific conventions
    "EM",   # Flake8-errmsg – error message style
    "EXE",  # Flake8-executable – executable file checks
    "FIX",  # Flake8-fixme – flags FIXME comments
    "FA",   # Flake8-future-annotations – future import for annotations
    "INT",  # Flake8-gettext – checks for proper internationalization usage
    "ISC",  # Flake8-implicit-str-concat – warns on implicit string concatenation
    "ICN",  # Flake8-import-conventions – enforces conventional import aliases
    "LOG",  # Flake8-logging – proper logging usage
    "G",    # Flake8-logging-format – logging format string issues
    "INP",  # Flake8-no-pep420 – warns against non-PEP420 namespace usage
    "PIE",  # Flake8-pie – Python improvement suggestions
    "PYI",  # Flake8-pyi – checks for type stub (.pyi) consistency
    "PT",   # Flake8-pytest-style – pytest best practices
    "Q",    # Flake8-quotes – enforces quote style consistency
    "RSE",  # Flake8-raise – proper raise statement usage
    "RET",  # Flake8-return – return statement issues
    "SLF",  # Flake8-self – flags instance methods that don't use self
    "SIM",  # Flake8-simplify – code simplification hints
    "SLOT", # Flake8-slots – suggests use of __slots__ where appropriate
    "TID",  # Flake8-tidy-imports – enforces specific import styles (e.g., no relative imports)
    "TD",   # Flake8-todos – flags TODO comments
    "TC",   # Flake8-type-checking – proper import of typing in type checks
    "ARG",  # Flake8-unused-arguments – flags unused function arguments
    "PTH",  # Flake8-use-pathlib – encourages pathlib over os.path
    # "T20",  # Flake8-print – disallows print statements (optional)
    # === Pylint-based checks === #
    "PLC",  # Pylint-convention - Pylint checks for conventions
    "PLE",  # Pylint-error - Pylint checks for more severe errors
    "PLR",  # Pylint-refactor - Pylint checks for refactoring capabilities
    "PLW",  # Pylint-warning - Pylint checks that issue warnings
    # === Other general-purpose linter checks === #
    "F",    # Pyflakes - rules based on Pyflakes
    "RUF",  # Ruff-specific rules – additional Ruff checks
    # === specific-purpose checks === #
    "FLY",  # Flynt – f-string conversion suggestions
    "NPY",  # NumPy-specific rules – ensures NumPy coding standards
    "PD",   # Pandas-vet – checks pandas-specific code practices
    "PERF", # Perflint – performance-related checks
    "TRY",  # Tryceratops – try/except usage suggestions
    # === isort integration === #
    "I",    # isort – import ordering checks
    # === complexity measure limiter === #
    "C90",  # McCabe – complexity metric for functions
    # === modernization and refactoring capabilities === #
    "UP",   # Pyupgrade – upgrades syntax to newer Python versions
    "FURB", # Refurb – rules for code refurbishment
    # === naming conventions enforcement === #
    "N",    # PEP8 Naming – naming conventions
    "E",    # Pycodestyle errors (style issues)
    "W",    # Pycodestyle warnings (style issues)
    # "D",    # Pydocstyle – docstring formatting
    # "DOC",  # Pydoclint – docstring linting and consistency (TO ENABLE)
]
ignore = [
    # === temporary suppression of pydoc requirements === #
    "D1",    # Pydocstyle - missing docstring in public module, class, or function
    "D203",  # Pydocstyle - one blank line required before class docstring
    "D212",  # Pydocstyle - summary line should be immediately after the opening quotes.
    "D401",  # Pydocstyle - Checks for docstring first lines that are not in an imperative mood.
    # === To be considered === #
    # "S311",  # Flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
    # "PERF401", # Perflint - Checks for for loops that can be replaced by a list comprehension.
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # asserts allowed to be in tests
    "INP001",  # implicit namespaces are ok for tests
    "PLR2004", # magic numbers are ok in tests
]
